// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/exec (interfaces: Command)

// Package mock_exec is a generated GoMock package.
package mock_exec

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommand) Execute(arg0 context.Context, arg1 string, arg2 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandMockRecorder) Execute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand)(nil).Execute), varargs...)
}

// ExecuteRedacted mocks base method.
func (m *MockCommand) ExecuteRedacted(arg0 context.Context, arg1 string, arg2 []string, arg3 map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRedacted", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRedacted indicates an expected call of ExecuteRedacted.
func (mr *MockCommandMockRecorder) ExecuteRedacted(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRedacted", reflect.TypeOf((*MockCommand)(nil).ExecuteRedacted), arg0, arg1, arg2, arg3)
}

// ExecuteWithTimeout mocks base method.
func (m *MockCommand) ExecuteWithTimeout(arg0 context.Context, arg1 string, arg2 time.Duration, arg3 bool, arg4 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWithTimeout", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWithTimeout indicates an expected call of ExecuteWithTimeout.
func (mr *MockCommandMockRecorder) ExecuteWithTimeout(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithTimeout", reflect.TypeOf((*MockCommand)(nil).ExecuteWithTimeout), varargs...)
}

// ExecuteWithTimeoutAndInput mocks base method.
func (m *MockCommand) ExecuteWithTimeoutAndInput(arg0 context.Context, arg1 string, arg2 time.Duration, arg3 bool, arg4 string, arg5 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWithTimeoutAndInput", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWithTimeoutAndInput indicates an expected call of ExecuteWithTimeoutAndInput.
func (mr *MockCommandMockRecorder) ExecuteWithTimeoutAndInput(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithTimeoutAndInput", reflect.TypeOf((*MockCommand)(nil).ExecuteWithTimeoutAndInput), varargs...)
}

// ExecuteWithoutLog mocks base method.
func (m *MockCommand) ExecuteWithoutLog(arg0 context.Context, arg1 string, arg2 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWithoutLog", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWithoutLog indicates an expected call of ExecuteWithoutLog.
func (mr *MockCommandMockRecorder) ExecuteWithoutLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithoutLog", reflect.TypeOf((*MockCommand)(nil).ExecuteWithoutLog), varargs...)
}
