// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils (interfaces: CSIProxyUtils)

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mount "k8s.io/mount-utils"
)

// MockCSIProxyUtils is a mock of CSIProxyUtils interface.
type MockCSIProxyUtils struct {
	ctrl     *gomock.Controller
	recorder *MockCSIProxyUtilsMockRecorder
}

// MockCSIProxyUtilsMockRecorder is the mock recorder for MockCSIProxyUtils.
type MockCSIProxyUtilsMockRecorder struct {
	mock *MockCSIProxyUtils
}

// NewMockCSIProxyUtils creates a new mock instance.
func NewMockCSIProxyUtils(ctrl *gomock.Controller) *MockCSIProxyUtils {
	mock := &MockCSIProxyUtils{ctrl: ctrl}
	mock.recorder = &MockCSIProxyUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSIProxyUtils) EXPECT() *MockCSIProxyUtilsMockRecorder {
	return m.recorder
}

// EvalHostSymlinks mocks base method.
func (m *MockCSIProxyUtils) EvalHostSymlinks(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalHostSymlinks", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalHostSymlinks indicates an expected call of EvalHostSymlinks.
func (mr *MockCSIProxyUtilsMockRecorder) EvalHostSymlinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalHostSymlinks", reflect.TypeOf((*MockCSIProxyUtils)(nil).EvalHostSymlinks), arg0, arg1)
}

// ExistsPath mocks base method.
func (m *MockCSIProxyUtils) ExistsPath(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsPath", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsPath indicates an expected call of ExistsPath.
func (mr *MockCSIProxyUtilsMockRecorder) ExistsPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsPath", reflect.TypeOf((*MockCSIProxyUtils)(nil).ExistsPath), arg0, arg1)
}

// GetAPIVersions mocks base method.
func (m *MockCSIProxyUtils) GetAPIVersions(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIVersions", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAPIVersions indicates an expected call of GetAPIVersions.
func (mr *MockCSIProxyUtilsMockRecorder) GetAPIVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIVersions", reflect.TypeOf((*MockCSIProxyUtils)(nil).GetAPIVersions), arg0)
}

// GetFilesystemUsage mocks base method.
func (m *MockCSIProxyUtils) GetFilesystemUsage(arg0 context.Context, arg1 string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemUsage", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFilesystemUsage indicates an expected call of GetFilesystemUsage.
func (mr *MockCSIProxyUtilsMockRecorder) GetFilesystemUsage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemUsage", reflect.TypeOf((*MockCSIProxyUtils)(nil).GetFilesystemUsage), arg0, arg1)
}

// IsMountPointMatch mocks base method.
func (m *MockCSIProxyUtils) IsMountPointMatch(arg0 context.Context, arg1 mount.MountPoint, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMountPointMatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMountPointMatch indicates an expected call of IsMountPointMatch.
func (mr *MockCSIProxyUtilsMockRecorder) IsMountPointMatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMountPointMatch", reflect.TypeOf((*MockCSIProxyUtils)(nil).IsMountPointMatch), arg0, arg1, arg2)
}

// MakeDir mocks base method.
func (m *MockCSIProxyUtils) MakeDir(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDir indicates an expected call of MakeDir.
func (mr *MockCSIProxyUtilsMockRecorder) MakeDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDir", reflect.TypeOf((*MockCSIProxyUtils)(nil).MakeDir), arg0, arg1)
}

// Rmdir mocks base method.
func (m *MockCSIProxyUtils) Rmdir(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rmdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rmdir indicates an expected call of Rmdir.
func (mr *MockCSIProxyUtilsMockRecorder) Rmdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockCSIProxyUtils)(nil).Rmdir), arg0, arg1)
}

// SMBMount mocks base method.
func (m *MockCSIProxyUtils) SMBMount(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBMount", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMBMount indicates an expected call of SMBMount.
func (mr *MockCSIProxyUtilsMockRecorder) SMBMount(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBMount", reflect.TypeOf((*MockCSIProxyUtils)(nil).SMBMount), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SMBUnmount mocks base method.
func (m *MockCSIProxyUtils) SMBUnmount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBUnmount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMBUnmount indicates an expected call of SMBUnmount.
func (mr *MockCSIProxyUtilsMockRecorder) SMBUnmount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBUnmount", reflect.TypeOf((*MockCSIProxyUtils)(nil).SMBUnmount), arg0, arg1, arg2)
}
