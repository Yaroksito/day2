// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/csi/controller_helpers (interfaces: ControllerHelper)

// Package mock_controller_helpers is a generated GoMock package.
package mock_controller_helpers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/netapp/trident/config"
	controllerhelpers "github.com/netapp/trident/frontend/csi/controller_helpers"
	storage "github.com/netapp/trident/storage"
	utils "github.com/netapp/trident/utils"
)

// MockControllerHelper is a mock of ControllerHelper interface.
type MockControllerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockControllerHelperMockRecorder
}

// MockControllerHelperMockRecorder is the mock recorder for MockControllerHelper.
type MockControllerHelperMockRecorder struct {
	mock *MockControllerHelper
}

// NewMockControllerHelper creates a new mock instance.
func NewMockControllerHelper(ctrl *gomock.Controller) *MockControllerHelper {
	mock := &MockControllerHelper{ctrl: ctrl}
	mock.recorder = &MockControllerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerHelper) EXPECT() *MockControllerHelperMockRecorder {
	return m.recorder
}

// GetNodePublicationState mocks base method.
func (m *MockControllerHelper) GetNodePublicationState(arg0 context.Context, arg1 string) (*utils.NodePublicationStateFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePublicationState", arg0, arg1)
	ret0, _ := ret[0].(*utils.NodePublicationStateFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePublicationState indicates an expected call of GetNodePublicationState.
func (mr *MockControllerHelperMockRecorder) GetNodePublicationState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePublicationState", reflect.TypeOf((*MockControllerHelper)(nil).GetNodePublicationState), arg0, arg1)
}

// GetNodeTopologyLabels mocks base method.
func (m *MockControllerHelper) GetNodeTopologyLabels(arg0 context.Context, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeTopologyLabels", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeTopologyLabels indicates an expected call of GetNodeTopologyLabels.
func (mr *MockControllerHelperMockRecorder) GetNodeTopologyLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeTopologyLabels", reflect.TypeOf((*MockControllerHelper)(nil).GetNodeTopologyLabels), arg0, arg1)
}

// GetSnapshotConfigForCreate mocks base method.
func (m *MockControllerHelper) GetSnapshotConfigForCreate(arg0, arg1 string) (*storage.SnapshotConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotConfigForCreate", arg0, arg1)
	ret0, _ := ret[0].(*storage.SnapshotConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotConfigForCreate indicates an expected call of GetSnapshotConfigForCreate.
func (mr *MockControllerHelperMockRecorder) GetSnapshotConfigForCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotConfigForCreate", reflect.TypeOf((*MockControllerHelper)(nil).GetSnapshotConfigForCreate), arg0, arg1)
}

// GetSnapshotConfigForImport mocks base method.
func (m *MockControllerHelper) GetSnapshotConfigForImport(arg0 context.Context, arg1, arg2 string) (*storage.SnapshotConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotConfigForImport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.SnapshotConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotConfigForImport indicates an expected call of GetSnapshotConfigForImport.
func (mr *MockControllerHelperMockRecorder) GetSnapshotConfigForImport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotConfigForImport", reflect.TypeOf((*MockControllerHelper)(nil).GetSnapshotConfigForImport), arg0, arg1, arg2)
}

// GetVolumeConfig mocks base method.
func (m *MockControllerHelper) GetVolumeConfig(arg0 context.Context, arg1 string, arg2 int64, arg3 map[string]string, arg4 config.Protocol, arg5 []config.AccessMode, arg6 config.VolumeMode, arg7 string, arg8, arg9, arg10 []map[string]string) (*storage.VolumeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeConfig", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(*storage.VolumeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeConfig indicates an expected call of GetVolumeConfig.
func (mr *MockControllerHelperMockRecorder) GetVolumeConfig(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeConfig", reflect.TypeOf((*MockControllerHelper)(nil).GetVolumeConfig), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// IsValidResourceName mocks base method.
func (m *MockControllerHelper) IsValidResourceName(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidResourceName", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidResourceName indicates an expected call of IsValidResourceName.
func (mr *MockControllerHelperMockRecorder) IsValidResourceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidResourceName", reflect.TypeOf((*MockControllerHelper)(nil).IsValidResourceName), arg0)
}

// RecordNodeEvent mocks base method.
func (m *MockControllerHelper) RecordNodeEvent(arg0 context.Context, arg1, arg2, arg3, arg4 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordNodeEvent", arg0, arg1, arg2, arg3, arg4)
}

// RecordNodeEvent indicates an expected call of RecordNodeEvent.
func (mr *MockControllerHelperMockRecorder) RecordNodeEvent(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNodeEvent", reflect.TypeOf((*MockControllerHelper)(nil).RecordNodeEvent), arg0, arg1, arg2, arg3, arg4)
}

// RecordVolumeEvent mocks base method.
func (m *MockControllerHelper) RecordVolumeEvent(arg0 context.Context, arg1, arg2, arg3, arg4 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordVolumeEvent", arg0, arg1, arg2, arg3, arg4)
}

// RecordVolumeEvent indicates an expected call of RecordVolumeEvent.
func (mr *MockControllerHelperMockRecorder) RecordVolumeEvent(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordVolumeEvent", reflect.TypeOf((*MockControllerHelper)(nil).RecordVolumeEvent), arg0, arg1, arg2, arg3, arg4)
}

// SupportsFeature mocks base method.
func (m *MockControllerHelper) SupportsFeature(arg0 context.Context, arg1 controllerhelpers.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockControllerHelperMockRecorder) SupportsFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockControllerHelper)(nil).SupportsFeature), arg0, arg1)
}

// Version mocks base method.
func (m *MockControllerHelper) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockControllerHelperMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockControllerHelper)(nil).Version))
}
