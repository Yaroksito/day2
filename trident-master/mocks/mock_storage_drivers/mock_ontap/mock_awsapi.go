// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/storage_drivers/ontap/awsapi (interfaces: AWSAPI)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/netapp/trident/storage"
	awsapi "github.com/netapp/trident/storage_drivers/ontap/awsapi"
)

// MockAWSAPI is a mock of AWSAPI interface.
type MockAWSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAWSAPIMockRecorder
}

// MockAWSAPIMockRecorder is the mock recorder for MockAWSAPI.
type MockAWSAPIMockRecorder struct {
	mock *MockAWSAPI
}

// NewMockAWSAPI creates a new mock instance.
func NewMockAWSAPI(ctrl *gomock.Controller) *MockAWSAPI {
	mock := &MockAWSAPI{ctrl: ctrl}
	mock.recorder = &MockAWSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSAPI) EXPECT() *MockAWSAPIMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method.
func (m *MockAWSAPI) CreateVolume(arg0 context.Context, arg1 *awsapi.VolumeCreateRequest) (*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockAWSAPIMockRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockAWSAPI)(nil).CreateVolume), arg0, arg1)
}

// DeleteVolume mocks base method.
func (m *MockAWSAPI) DeleteVolume(arg0 context.Context, arg1 *awsapi.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockAWSAPIMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockAWSAPI)(nil).DeleteVolume), arg0, arg1)
}

// GetFilesystemByID mocks base method.
func (m *MockAWSAPI) GetFilesystemByID(arg0 context.Context, arg1 string) (*awsapi.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemByID", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemByID indicates an expected call of GetFilesystemByID.
func (mr *MockAWSAPIMockRecorder) GetFilesystemByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemByID", reflect.TypeOf((*MockAWSAPI)(nil).GetFilesystemByID), arg0, arg1)
}

// GetFilesystems mocks base method.
func (m *MockAWSAPI) GetFilesystems(arg0 context.Context) (*[]*awsapi.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystems", arg0)
	ret0, _ := ret[0].(*[]*awsapi.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystems indicates an expected call of GetFilesystems.
func (mr *MockAWSAPIMockRecorder) GetFilesystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystems", reflect.TypeOf((*MockAWSAPI)(nil).GetFilesystems), arg0)
}

// GetSVMByID mocks base method.
func (m *MockAWSAPI) GetSVMByID(arg0 context.Context, arg1 string) (*awsapi.SVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMByID", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.SVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMByID indicates an expected call of GetSVMByID.
func (mr *MockAWSAPIMockRecorder) GetSVMByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMByID", reflect.TypeOf((*MockAWSAPI)(nil).GetSVMByID), arg0, arg1)
}

// GetSVMs mocks base method.
func (m *MockAWSAPI) GetSVMs(arg0 context.Context) (*[]*awsapi.SVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMs", arg0)
	ret0, _ := ret[0].(*[]*awsapi.SVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMs indicates an expected call of GetSVMs.
func (mr *MockAWSAPIMockRecorder) GetSVMs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMs", reflect.TypeOf((*MockAWSAPI)(nil).GetSVMs), arg0)
}

// GetSecret mocks base method.
func (m *MockAWSAPI) GetSecret(arg0 context.Context, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockAWSAPIMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockAWSAPI)(nil).GetSecret), arg0, arg1)
}

// GetVolume mocks base method.
func (m *MockAWSAPI) GetVolume(arg0 context.Context, arg1 *storage.VolumeConfig) (*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockAWSAPIMockRecorder) GetVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockAWSAPI)(nil).GetVolume), arg0, arg1)
}

// GetVolumeByARN mocks base method.
func (m *MockAWSAPI) GetVolumeByARN(arg0 context.Context, arg1 string) (*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByARN", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByARN indicates an expected call of GetVolumeByARN.
func (mr *MockAWSAPIMockRecorder) GetVolumeByARN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByARN", reflect.TypeOf((*MockAWSAPI)(nil).GetVolumeByARN), arg0, arg1)
}

// GetVolumeByID mocks base method.
func (m *MockAWSAPI) GetVolumeByID(arg0 context.Context, arg1 string) (*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByID", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByID indicates an expected call of GetVolumeByID.
func (mr *MockAWSAPIMockRecorder) GetVolumeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByID", reflect.TypeOf((*MockAWSAPI)(nil).GetVolumeByID), arg0, arg1)
}

// GetVolumeByName mocks base method.
func (m *MockAWSAPI) GetVolumeByName(arg0 context.Context, arg1 string) (*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByName", arg0, arg1)
	ret0, _ := ret[0].(*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByName indicates an expected call of GetVolumeByName.
func (mr *MockAWSAPIMockRecorder) GetVolumeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByName", reflect.TypeOf((*MockAWSAPI)(nil).GetVolumeByName), arg0, arg1)
}

// GetVolumes mocks base method.
func (m *MockAWSAPI) GetVolumes(arg0 context.Context) (*[]*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", arg0)
	ret0, _ := ret[0].(*[]*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes.
func (mr *MockAWSAPIMockRecorder) GetVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockAWSAPI)(nil).GetVolumes), arg0)
}

// RelabelVolume mocks base method.
func (m *MockAWSAPI) RelabelVolume(arg0 context.Context, arg1 *awsapi.Volume, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelabelVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelabelVolume indicates an expected call of RelabelVolume.
func (mr *MockAWSAPIMockRecorder) RelabelVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelabelVolume", reflect.TypeOf((*MockAWSAPI)(nil).RelabelVolume), arg0, arg1, arg2)
}

// ResizeVolume mocks base method.
func (m *MockAWSAPI) ResizeVolume(arg0 context.Context, arg1 *awsapi.Volume, arg2 uint64) (*awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*awsapi.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeVolume indicates an expected call of ResizeVolume.
func (mr *MockAWSAPIMockRecorder) ResizeVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolume", reflect.TypeOf((*MockAWSAPI)(nil).ResizeVolume), arg0, arg1, arg2)
}

// VolumeExists mocks base method.
func (m *MockAWSAPI) VolumeExists(arg0 context.Context, arg1 *storage.VolumeConfig) (bool, *awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*awsapi.Volume)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeExists indicates an expected call of VolumeExists.
func (mr *MockAWSAPIMockRecorder) VolumeExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExists", reflect.TypeOf((*MockAWSAPI)(nil).VolumeExists), arg0, arg1)
}

// VolumeExistsByARN mocks base method.
func (m *MockAWSAPI) VolumeExistsByARN(arg0 context.Context, arg1 string) (bool, *awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExistsByARN", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*awsapi.Volume)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeExistsByARN indicates an expected call of VolumeExistsByARN.
func (mr *MockAWSAPIMockRecorder) VolumeExistsByARN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExistsByARN", reflect.TypeOf((*MockAWSAPI)(nil).VolumeExistsByARN), arg0, arg1)
}

// VolumeExistsByID mocks base method.
func (m *MockAWSAPI) VolumeExistsByID(arg0 context.Context, arg1 string) (bool, *awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExistsByID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*awsapi.Volume)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeExistsByID indicates an expected call of VolumeExistsByID.
func (mr *MockAWSAPIMockRecorder) VolumeExistsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExistsByID", reflect.TypeOf((*MockAWSAPI)(nil).VolumeExistsByID), arg0, arg1)
}

// VolumeExistsByName mocks base method.
func (m *MockAWSAPI) VolumeExistsByName(arg0 context.Context, arg1 string) (bool, *awsapi.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExistsByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*awsapi.Volume)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeExistsByName indicates an expected call of VolumeExistsByName.
func (mr *MockAWSAPIMockRecorder) VolumeExistsByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExistsByName", reflect.TypeOf((*MockAWSAPI)(nil).VolumeExistsByName), arg0, arg1)
}

// WaitForVolumeStates mocks base method.
func (m *MockAWSAPI) WaitForVolumeStates(arg0 context.Context, arg1 *awsapi.Volume, arg2, arg3 []string, arg4 time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForVolumeStates", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForVolumeStates indicates an expected call of WaitForVolumeStates.
func (mr *MockAWSAPIMockRecorder) WaitForVolumeStates(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForVolumeStates", reflect.TypeOf((*MockAWSAPI)(nil).WaitForVolumeStates), arg0, arg1, arg2, arg3, arg4)
}
