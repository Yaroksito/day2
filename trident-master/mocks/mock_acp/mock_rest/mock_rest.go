// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/acp (interfaces: REST)

// Package mock_acp is a generated GoMock package.
package mock_acp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	version "github.com/netapp/trident/utils/version"
)

// MockREST is a mock of REST interface.
type MockREST struct {
	ctrl     *gomock.Controller
	recorder *MockRESTMockRecorder
}

// MockRESTMockRecorder is the mock recorder for MockREST.
type MockRESTMockRecorder struct {
	mock *MockREST
}

// NewMockREST creates a new mock instance.
func NewMockREST(ctrl *gomock.Controller) *MockREST {
	mock := &MockREST{ctrl: ctrl}
	mock.recorder = &MockRESTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockREST) EXPECT() *MockRESTMockRecorder {
	return m.recorder
}

// Entitled mocks base method.
func (m *MockREST) Entitled(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entitled", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Entitled indicates an expected call of Entitled.
func (mr *MockRESTMockRecorder) Entitled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entitled", reflect.TypeOf((*MockREST)(nil).Entitled), arg0, arg1)
}

// GetVersion mocks base method.
func (m *MockREST) GetVersion(arg0 context.Context) (*version.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0)
	ret0, _ := ret[0].(*version.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockRESTMockRecorder) GetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockREST)(nil).GetVersion), arg0)
}
